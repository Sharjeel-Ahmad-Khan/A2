import React, { useState } from 'react';
import { View, Text, FlatList, Button, StyleSheet, TextInput, Alert, Image, TouchableOpacity, Modal } from 'react-native';
import axios from 'axios';

const App = () => {
  // State for user details, cart, and food items
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [mobile, setMobile] = useState('');
  const [address, setAddress] = useState('');
  const [location, setLocation] = useState('');
  const [cart, setCart] = useState([]);
  const [selectedFood, setSelectedFood] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [showLoginMenu, setShowLoginMenu] = useState(false);
  const [movies, setMovies] = useState([]);

  // Mock food items with remote image URLs and reviews
  const foodItems = [
    {
      id: 1,
      name: 'Pizza',
      image: { uri: 'https://example.com/pizza.jpg' },
      price: 12.99,
      reviews: [
        { id: 1, user: 'Ali', comment: 'The food is amazing!' },
        { id: 2, user: 'Sara', comment: 'Great service, highly recommended!' },
      ],
    },
    {
      id: 2,
      name: 'Burger',
      image: { uri: 'https://example.com/burger.jpg' },
      price: 8.99,
      reviews: [
        { id: 1, user: 'Ahmed', comment: 'Delicious and affordable!' },
        { id: 2, user: 'Fatima', comment: 'Loved the taste!' },
      ],
    },
  ];

  // Filtered food items based on search query
  const filteredFoodItems = searchQuery
    ? foodItems.filter((item) => item.name.toLowerCase().includes(searchQuery.toLowerCase()))
    : foodItems;

  // Add item to cart
  const addToCart = (item) => {
    setCart([...cart, item]);
  };

  // Remove item from cart
  const removeFromCart = (itemId) => {
    const updatedCart = cart.filter((item) => item.id !== itemId);
    setCart(updatedCart);
  };

  // Place order
  const placeOrder = () => {
    if (cart.length === 0) {
      Alert.alert('Error', 'Cart is empty');
      return;
    }
    const total = cart.reduce((sum, item) => sum + item.price, 0);
    Alert.alert(
      'Order Confirmation',
      `Total: $${total.toFixed(2)}\n\nPayment Options:`,
      [
        { text: 'Pay Now (Online)', onPress: () => confirmOrder('Online') },
        { text: 'Pay on Delivery (Cash)', onPress: () => confirmOrder('Cash') },
      ]
    );
  };

  // Confirm order
  const confirmOrder = (paymentMethod) => {
    Alert.alert('Success', `Order placed successfully!\nPayment Method: ${paymentMethod}`);
    setCart([]); // Clear cart
  };

  // Fetch movies from OMDb API
  const fetchMovies = async () => {
    const OMDB_API_KEY = '87170a9b';
    const OMDB_API_URL = `http://www.omdbapi.com/?apikey=${OMDB_API_KEY}&s=${searchQuery}`;
    try {
      const response = await axios.get(OMDB_API_URL);
      setMovies(response.data.Search || []);
    } catch (error) {
      console.error('Error fetching movies:', error);
      Alert.alert('Error', 'Failed to fetch movies');
    }
  };

  // Render food item
  const renderFoodItem = ({ item }) => (
    <TouchableOpacity style={styles.foodItem} onPress={() => setSelectedFood(item)}>
      <Image source={item.image} style={styles.foodImage} />
      <Text style={styles.foodName}>{item.name}</Text>
      <Text style={styles.foodPrice}>${item.price.toFixed(2)}</Text>
      <View style={styles.reviewsContainer}>
        {item.reviews.map((review) => (
          <Text key={review.id} style={styles.reviewText}>
            {review.user}: {review.comment}
          </Text>
        ))}
      </View>
    </TouchableOpacity>
  );

  // Render cart item
  const renderCartItem = ({ item }) => (
    <View style={styles.cartItem}>
      <Text style={styles.cartItemText}>
        {item.name} - ${item.price.toFixed(2)}
      </Text>
      <Button title="Remove" onPress={() => removeFromCart(item.id)} />
    </View>
  );

  // Login menu
  const renderLoginMenu = () => (
    <Modal visible={showLoginMenu} transparent={true} animationType="slide">
      <View style={styles.loginMenu}>
        <Text style={styles.sectionTitle}>Login</Text>
        <TextInput
          style={styles.input}
          placeholder="Name"
          value={name}
          onChangeText={setName}
        />
        <TextInput
          style={styles.input}
          placeholder="Email"
          value={email}
          onChangeText={setEmail}
        />
        <Button title="Upload Profile Picture" onPress={() => Alert.alert('Upload', 'Profile picture upload clicked')} />
        <Button title="Login with Gmail" onPress={() => setIsLoggedIn(true)} />
        <Button title="Close" onPress={() => setShowLoginMenu(false)} />
      </View>
    </Modal>
  );

  return (
    <View style={styles.container}>
      {/* App Name */}
      <Text style={styles.appName}>SakQ Food Delivery App</Text>

      {/* Login Menu Button */}
      <TouchableOpacity style={styles.loginButton} onPress={() => setShowLoginMenu(true)}>
        <Text style={styles.loginButtonText}>•••</Text>
      </TouchableOpacity>

      {/* Login Menu */}
      {renderLoginMenu()}

      {/* Home Page After Login */}
      {isLoggedIn && (
        <FlatList
          ListHeaderComponent={
            <>
              {/* Search Bar */}
              <TextInput
                style={styles.searchBar}
                placeholder="Search for food..."
                value={searchQuery}
                onChangeText={setSearchQuery}
              />

              {/* Food Suggestions */}
              <Text style={styles.sectionTitle}>Food Suggestions</Text>
            </>
          }
          data={filteredFoodItems}
          keyExtractor={(item) => item.id.toString()}
          renderItem={renderFoodItem}
          ListFooterComponent={
            <>
              {/* Selected Food Details */}
              {selectedFood && (
                <View style={styles.foodDetails}>
                  <Text style={styles.sectionTitle}>Order {selectedFood.name}</Text>
                  <TextInput
                    style={styles.input}
                    placeholder="Mobile Number"
                    value={mobile}
                    onChangeText={setMobile}
                  />
                  <TextInput
                    style={styles.input}
                    placeholder="Address"
                    value={address}
                    onChangeText={setAddress}
                  />
                  <TextInput
                    style={styles.input}
                    placeholder="Location"
                    value={location}
                    onChangeText={setLocation}
                  />
                  <View style={styles.buttonRow}>
                    <Button title="Book Now" onPress={placeOrder} />
                    <Button title="Add to Cart" onPress={() => addToCart(selectedFood)} />
                  </View>
                </View>
              )}

              {/* Cart */}
              <Text style={styles.sectionTitle}>Cart</Text>
              {cart.length > 0 ? (
                <FlatList
                  data={cart}
                  keyExtractor={(item) => item.id.toString()}
                  renderItem={renderCartItem}
                />
              ) : (
                <Text style={styles.emptyCart}>Your cart is empty.</Text>
              )}
              {cart.length > 0 && (
                <Button title="Place Order" onPress={placeOrder} />
              )}

              {/* Movie Search */}
              <View style={styles.movieSection}>
                <Text style={styles.sectionTitle}>Movie Search</Text>
                <TextInput
                  style={styles.input}
                  placeholder="Search for a movie..."
                  value={searchQuery}
                  onChangeText={setSearchQuery}
                />
                <Button title="Search Movies" onPress={fetchMovies} />
                <FlatList
                  data={movies}
                  keyExtractor={(item) => item.imdbID}
                  renderItem={({ item }) => (
                    <View style={styles.movieItem}>
                      <Image source={{ uri: item.Poster }} style={styles.movieImage} />
                      <Text style={styles.movieTitle}>{item.Title}</Text>
                      <Text style={styles.movieYear}>{item.Year}</Text>
                    </View>
                  )}
                />
              </View>
            </>
          }
        />
      )}
    </View>
  );
};

// Styles
const styles = StyleSheet.create({
  container: { padding: 20 },
  appName: { fontSize: 24, fontWeight: 'bold', textAlign: 'center', marginBottom: 20 },
  loginButton: { position: 'absolute', top: 20, right: 20 },
  loginButtonText: { fontSize: 24 },
  loginMenu: { backgroundColor: '#fff', padding: 20, margin: 20, borderRadius: 10 },
  searchBar: { borderWidth: 1, borderColor: '#ccc', padding: 10, borderRadius: 5, marginBottom: 20 },
  sectionTitle: { fontSize: 18, fontWeight: 'bold', marginBottom: 10 },
  input: { borderWidth: 1, borderColor: '#ccc', padding: 10, borderRadius: 5, marginBottom: 10 },
  foodItem: { marginRight: 15, alignItems: 'center' },
  foodImage: { width: 100, height: 100, borderRadius: 10 },
  foodName: { fontSize: 16, marginTop: 5 },
  foodPrice: { fontSize: 14, color: '#888' },
  reviewsContainer: { marginTop: 5 },
  reviewText: { fontSize: 12, color: '#555' },
  foodDetails: { marginBottom: 20 },
  buttonRow: { flexDirection: 'row', justifyContent: 'space-between' },
  cartItem: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 10 },
  cartItemText: { fontSize: 16 },
  emptyCart: { textAlign: 'center', color: '#888' },
  movieSection: { marginBottom: 20 },
  movieItem: { marginBottom: 10 },
  movieImage: { width: 100, height: 150, borderRadius: 5 },
  movieTitle: { fontSize: 16, fontWeight: 'bold' },
  movieYear: { fontSize: 14, color: '#888' },
});

export default App;